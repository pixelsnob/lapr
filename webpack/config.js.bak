
var webpack           = require('webpack'),
    path              = require('path'),
    ExtractTextPlugin = require('extract-text-webpack-plugin');

var app_dir = path.resolve(__dirname, '../');

module.exports = {
  context: app_dir,
  entry: { 
    main: [ // (client)
      //'react-hot-loader/patch',
      //'webpack-dev-server/client?http://0.0.0.0:8080/',
      //'webpack/hot/only-dev-server',
      path.join(app_dir, 'public/js/main.js')
    ]
  },
  output: {
     path: path.join(app_dir, 'public/dist'),
     publicPath: '/dist/',
     filename: '[name].js',
     libraryTarget: 'amd'
  },
  resolve: {
    extensions: [ '.js' ],
    modules: [ 'node_modules', 'public/js' ],
    //modules: [ path.join(app_dir, 'public/js'), path.join(app_dir, 'node_modules') ],
    /*root: [
      path.join(app_dir, 'public/js'),
      path.join(app_dir, 'node_modules')
    ],*/
    alias: {
      template:                  'lib/template',
      vex_dialog:                'vex-js/js/vex.dialog',
      markdown:                  'marked',
      'backbone-paginator':      'backbone.paginator',
      typeahead:                 'typeahead.js'
      //jade:                      'jade-browser'
    }
  },
  devtool: 'source-map',
  plugins: [
    new webpack.DefinePlugin({
      'process.env': {
        'NODE_ENV': JSON.stringify('production')
      }
    }),
    //new ExtractTextPlugin('main.css'),
    /*new webpack.optimize.UglifyJsPlugin({
      compress: { warnings: false }
    }),*/
    new webpack.ProvidePlugin({
      $:         'jquery',
      jQuery:    'jquery',
      _:         'underscore',
      Vex:       'vexflow'
    })
    //new webpack.HotModuleReplacementPlugin()
  ],
  module : {
    rules: [
			{
				test: /(\.js)$/,
				exclude: /(node_modules|bower_components)/,
				use: {
					// babel-loader to convert ES6 code to ES5 + amdCleaning requirejs code into simple JS code, taking care of modules to load as desired
					loader: 'babel-loader',
					options: {
						presets: ['es2015'],
						plugins: []
					}
				}
			},
			{ test: /jQuery/, loader: 'expose-loader?$' }, 
			{ test: /application/, loader: 'expose-loader?application' },
			{ test: /base64/, loader: 'exports-loader?Base64' }
    ]
  }
};


